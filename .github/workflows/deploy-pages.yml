# .github/workflows/test.yml

name: Ubuntu Build, Test, and Deploy Pages

on:
  push:
    branches: [ main ] # Trigger on push to main branch
  pull_request:
    branches: [ main ] # Trigger on pull requests targeting main branch
  workflow_dispatch:    # Allows manual triggering

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: read # Needed to checkout the code
  pages: write    # Needed to deploy to GitHub Pages
  id-token: write # Needed for OIDC token for GitHub Pages deployment

# Allow only one concurrent deployment per branch/ref.
# Skip runs queued between the run in-progress and latest queued.
# Do NOT cancel in-progress runs for 'main' branch Pages deployments.
concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }} # Cancel PR builds if newer commit pushed, but not main branch deployments

jobs:
  build-test-deploy:
    name: Build, Test & Deploy on Ubuntu
    runs-on: ubuntu-22.04

    # Define environment for Pages deployment step
    # This is only relevant when the 'Deploy to GitHub Pages' step actually runs
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies (APT, WABT, Bun)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang lld cmake curl wget nodejs npm binaryen tcc

          # Install WABT (1.0.33) from binary release
          wget https://github.com/WebAssembly/wabt/releases/download/1.0.33/wabt-1.0.33-ubuntu.tar.gz
          tar -xzf wabt-1.0.33-ubuntu.tar.gz
          sudo cp wabt-1.0.33/bin/* /usr/local/bin/

          # Install Bun
          curl -fsSL https://bun.sh/install | bash
          # Add bun to PATH for subsequent steps
          export BUN_INSTALL="$HOME/.bun"
          export PATH="$BUN_INSTALL/bin:$PATH"
          echo "$BUN_INSTALL/bin" >> $GITHUB_PATH
        # Note: BUN_INSTALL env var might not persist reliably between steps without export to GITHUB_ENV
        # Adding to GITHUB_PATH is generally sufficient for finding the executable

      - name: Patch Makefile to remove -mrelaxed-simd
        run: |
          sed -i 's/-mrelaxed-simd//g' Makefile

      - name: Patch relaxed SIMD intrinsic in semifloat.c
        run: |
          sed -i 's/wasm_f64x2_relaxed_madd(wasm_f64x2_neg(c), b, a)/wasm_f64x2_add(wasm_f64x2_mul(a, b), wasm_f64x2_neg(c))/g' src/jit/stubs/semifloat.c

      - name: Install Node.js dependencies
        # Ensure Bun is in PATH
        run: $HOME/.bun/bin/bun i --verbose # Use explicit path or ensure GITHUB_PATH worked

      - name: Build project (patched)
        id: build # Give the build step an ID
        # Ensure Bun is in PATH
        run: |
          echo "Starting build..."
          $HOME/.bun/bin/bun run build # Or: $HOME/.bun/bin/bun scripts/build.ts
          echo "Build complete."

      # --- Test Steps ---
      # These run on both push and pull_request events (if build succeeds)

      - name: Run RandomX example (Single Thread)
        run: node examples/randomx_single.js

      - name: Patch randomx_threaded.js to stop after 10 intervals
        run: |
          echo "Limiting randomx_threaded.js to 10 hashrate prints..."
          # Insert clean, autoindented JS block after `let start_time = ...`
          sed -i '/let start_time = performance.now()/a\
                    let intervalCount = 0;\
                    const maxIntervals = 10;' examples/randomx_threaded.js
          # Add exit condition into interval block
          sed -i '/setInterval(() => {/a\
                    if (++intervalCount >= maxIntervals) process.exit(0);' examples/randomx_threaded.js

      - name: Run RandomX example (Multi Thread)
        run: node examples/randomx_threaded.js

      - name: Run SuperScalarHash example
        run: node examples/superscalarhash.js

      - name: Test Summary
        run: echo "âœ… Build and tests completed successfully."

      # --- Deployment Steps ---
      # These steps will only run IF:
      # 1. The trigger was a 'push' event (NOT 'pull_request')
      # 2. The push was to the 'main' branch (ref == 'refs/heads/main')
      # 3. The 'build' step above completed successfully

      - name: Prepare Artifact Directory for Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.build.outcome == 'success'
        run: |
          echo "Preparing GitHub Pages artifact (only runs on push to main)..."
          mkdir ./gh-pages-dist
          cp examples/mining/index.html ./gh-pages-dist/
          cp examples/mining/worker.js ./gh-pages-dist/
          # Check if the built library exists before copying
          if [ -f "pkg-randomx.js/dist/web/index.js" ]; then
            cp pkg-randomx.js/dist/web/index.js ./gh-pages-dist/lib.js
            echo "Copied index.html, worker.js, and lib.js"
          else
            echo "Error: Built library pkg-randomx.js/dist/web/index.js not found! Cannot prepare artifact."
            exit 1
          fi
          echo "Artifact contents:"
          ls -R ./gh-pages-dist

      - name: Setup Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.build.outcome == 'success'
        uses: actions/configure-pages@v5
        # No configuration needed unless using custom domains, etc.

      - name: Upload artifact
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.build.outcome == 'success'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './gh-pages-dist' # Upload the prepared directory

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.build.outcome == 'success'
        id: deployment
        uses: actions/deploy-pages@v4
        # The environment is set at the job level. No 'with' needed here.
